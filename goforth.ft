: \   1 parse 2drop ;  immediate  \ now we can use line comments
: (   41 parse 2drop ; immediate  ( and now we can use ( comments )

\ Copyright (c) 2012, Matt Hellige
\ All rights reserved.
\
\ Redistribution and use in source and binary forms, with or without
\ modification, are permitted provided that the following conditions are met:
\
\   Redistributions of source code must retain the above copyright notice,
\   this list of conditions and the following disclaimer.
\
\   Redistributions in binary form must reproduce the above copyright
\   notice, this list of conditions and the following disclaimer in the
\   documentation and/or other materials provided with the distribution.
\
\ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
\ LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
\ A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
\ HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
\ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
\ LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
\ DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
\ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
\ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
\ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

: '\n'   10 ;
: bl   32 ;
: space   bl emit ;

: true   -1 ;
: false   0 ;
: not   0= ;

\ TODO should have error handling where we have 'find drop'
\ find a word in the dictionary
: '  ( "word" -- xt )  parse-word find drop ;
\ same thing, immediate version
: [']  ( "word" -- ) ( -- xt )  [ ' lit dup , , ] , ' , ; immediate

\ i provide compile and [compile] rather than postpone. i find the extra
\ 'intelligence' of postpone confusing and irritating.
\ compile an immediate word into the *current* word
: [compile]   ' , ; immediate
\ compile a non-immediate word *into the word being defined*
: compile   [compile] ['] ['] , , ; immediate

\ compile a literal from the stack
: literal   compile lit , ; immediate

\ here's an example of compile and [compile], this produces the same
\ definition of ; as we have in forth.asm.
\ : my;  compile exit latest @ hidden [compile] [ ; immediate
\ : test 65 emit my;
\ test test test

\ this implementation of does> can only be used within a : definition, as
\ in ans, and unlike as in, for example, gforth.
: setdoes   latest @ >cfa ! ;
: does>
  compile lit here 0 ,
  compile setdoes
  compile exit
  here swap !
  create-does ]
  ; immediate

: recurse   latest @ >cfa , ; immediate

\ here's an example of recurse:
\ : fac ( n -- n) dup 1 > if dup 1- recurse * then ;


\ some arithmetic
: <=  ( n n -- ? ) > not ;
: >=  ( n n -- ? ) < not ;
: 0<  ( n -- ? ) 0 < ;
: 0>  ( n -- ? ) 0 > ;

\ Primitive branching helpers.
: start-branch  ( -- addr ) compile branch here 0 , ;
: start-0branch ( -- addr ) compile 0branch here 0 , ;
: end-branch    ( addr -- ) dup here swap - swap ! ;


\ if-then-else
: if     start-0branch ; immediate
: then   end-branch ; immediate
: else   start-branch swap end-branch ; immediate

\ unless is just bizarro if
: unless   compile not [compile] if ; immediate

\ begin LOOP COND until (until non-zero)
: begin   here ; immediate
: until   compile 0branch here - , ; immediate

\ begin LOOP again (infinite loop)
: again   compile branch here - , ; immediate

\ begin COND while LOOP repeat
: while    start-0branch ; immediate
: repeat   compile branch swap here - , end-branch ; immediate


\ do LOOP loop
\ TODO implement leave
: do   0 here \ leave 0 and current addr on the compile-time stack
       compile 2>r \ move limit and index to return stack
       ; immediate
\ ?do skips the loop if limit and start are equal. (this explains the initial 0
\ in the definition of do.)
: ?do  compile 2dup compile <> \ do the test
       start-0branch \ branch if equal
       here compile 2>r ; immediate

: loop compile 2r> \ fetch limit and index
       compile 1+ \ increment index
       compile 2dup compile = \ do the test
       compile 0branch here - , \ and branch back if it failed
       ?dup if end-branch then \ set the initial branch, if any
       compile 2drop \ drop the limit and index when we're done
       ; immediate

\ this isn't right per ans. +loop is supposed to do something completely
\ crazy involving "crossing the boundary between limit and limit-1," but
\ the specified semantics are very controversial and totally nuts so
\ for now... +loop doesn't work for negative step sizes.
: +loop compile 2r> \ fetch limit and index
        compile rot compile + \ perform increment
        compile 2dup compile <= \ do the test
        compile 0branch here - , \ and branch back if it failed
        ?dup if end-branch then \ set the initial branch, if any
        compile 2drop \ drop the limit and index when we're done
        ; immediate

\ you might think these don't need to be immediate. but they do. if not, then
\ by the time we've entered i and execute r@, the return stack will already
\ hold the return address of i, which is, of course, not what we want. so
\ it's important that we actually inline the primitives here.
: i  ( -- i )  compile r@ ; immediate
: i' ( -- lim )  compile 2r@ compile drop ; immediate
: j  ( -- j )  compile 2r> compile r@ compile -rot compile 2>r ; immediate
: unloop  ( -- ) compile 2rdrop ; immediate


\ case .. of .. endof .. endcase
: case   0 ; immediate
: of   compile over compile = [compile] if compile drop ; immediate
: endof   [compile] else ; immediate
: endcase   compile drop begin ?dup while [compile] then repeat ; immediate

\ note that you can also use case/endcase with predicates other than 0, via
\ a slight abuse of the implementation. for example:
\  : fb  ( n -- )
\    case
\      dup  15 mod 0=  if drop ." FizzBuzz " else
\      dup   5 mod 0=  if drop ." Buzz " else
\      dup   3 mod 0=  if drop ." Fizz " else
\      dup .
\    endcase ;
\ contrast this with the more usual:
\  : asdf  ( n -- )
\    case
\      15 of ." it's fifteen! " endof
\       5 of ." it's five! " endof
\       3 of ." it's three! " endof
\      ( default ) dup ." it's " .
\    endcase ;


\ standard base-changing words
: decimal  ( -- )  10 base ! ;
: hex  ( -- )  16 base ! ;


\ char grabs first char of next word, but it needs to be state-smart...
: char   parse-word drop @
         state @ if [compile] literal then ; immediate
\ and a state-smart hex parsing word. this should really be done gforth-style...
: 0x   base @ >r hex
       0 parse-word >number 2drop \ TODO check errors
       state @ if [compile] literal then
       r> base ! ; immediate


\ stack manipulators
: nip  ( x y -- y )  swap drop ;
: tuck  ( x y -- y x y )  swap over ;
: pick  ( x_u ... x_1 x_0 u -- x_u ... x_1 x_0 x_u )  1+ dsp@ + @ ;


\ more arithmetic/logic
\ TODO this doesn't handle wrapping around 0 correctly
: within  ( n lo hi -- ? )
    2 pick > if
      >= if true else false then
    else 2drop false then ;

: min ( n n -- n ) 2dup < unless swap then drop ;
: max ( n n -- n ) 2dup > unless swap then drop ;


\ printing...

: spaces  ( n -- )  0 max 0 ?do space loop ;

: u.  ( u -- )
    base @ u/mod
    ?dup if recurse then
    dup 10 u< if char 0 else 10 - char a then + emit ;

\ number of digits in an unsigned number in the current base
: uwidth  ( u -- width )  base @ u/ ?dup if recurse 1+ else 1 then ;
\ print unsigned with minimum width (space-padded)
: u.r  ( u width -- ) swap dup uwidth rot swap - spaces u. ;
\ same thing, zero-padded
: u.r0 ( u width -- ) swap dup uwidth rot swap -
    0 max 0 ?do char 0 emit loop u. ;
\ print signed with minimum width (space-padded)
: .r  ( n width -- ) swap dup 0<
    if negate 1 swap rot 1- else 0 swap rot then
    swap dup uwidth rot swap -  spaces swap  if char - emit then  u. ;

: . 0 .r space ;
: .s  ( -- )
    dsp@ s0 @ swap - char < emit u. char > emit space
    dsp@ s0 @ begin 1- 2dup u<= while dup @ . repeat 2drop ;
: u. u. space ;

: ? ( addr -- ) @ . ;


\ strings
: .(   char ) parse type ; immediate

: s"   compile litstring  char " parse
       dup ,                    \ compile the count
       here                     \ save current compile location
       swap dup allot           \ advance it
       move ; immediate         \ copy the string

: ."   [compile] s"  compile type ; immediate


\ memory dump
: printable  ( u -- ? ) bl 128 within ;
: bounds   over + swap ;
variable /dump
: .cell   1 /dump -! /dump @ 0<
    if 5 spaces else dup @ 4 u.r0 space then 1+ ;
: .chars   /dump @ bounds
    ?do i @ dup printable unless drop char . then emit loop ;
: .line   dup .cell .cell .cell .cell space drop 4 /dump +! .chars ;
: dump  ( addr len -- )
    cr base @ >r hex
    0 ?do  i' i - 4 min /dump ! dup 4 u.r0 ." : " dup .line cr 4 + 4 +loop
    drop r> base ! ;


\ abort is just a stack-clearing quit, but since we haven't defined
\ quit yet, we need to indirect through a variable (or defer, once we have it.)
variable quitword
: abort   s0 @ dsp!  quitword @ execute ;
\ abort" is similar, but prints a message and only fires if n is non-zero
: doabrt  ( n a u -- ) rot if cr ." ABORT: " type abort else 2drop then ;
: abort"  ( n -- )  [compile] s" compile doabrt ; immediate


\ words to handle terminal attributes. see below for examples...
\ i'm not super happy with this design...
0 constant term

: r  ( term -- term )  4 or ;
: g  ( term -- term )  2 or ;
: b  ( term -- term )  1 or ;
: hi ( term -- term )  8 or ;

\ Set up some masks.
term r g b hi 2* invert constant bgmask
term r g b hi 2* 4 lshift invert constant fgmask

: bg ( term -- ) 2*  conattr @  bgmask and or conattr ! ;
: fg ( term -- ) 2* 4 lshift  conattr @  fgmask and or conattr ! ;
: blink  ( -- )  conattr @ 1 xor conattr ! ; \ this one is a toggle
: defcon ( -- )  term bg  term r g b fg ;


\ finally, the traditional repl that checks after each line for stack underflow.
\ surprisingly, because of the memory layout, this simple check is enough to
\ catch a lot of problems before the heap is actually damaged.
: quit   cr  r0 @ rsp!
    begin
      defcon  cr refill  term g hi fg
      0= abort" failed to refill input buffer"
      term g fg  interpret  term g hi fg
      0= abort" no such word"
      dsp@ s0 @ u> abort" stack underflow"
      space ." ok " cr
    again ;
\ and set the variable to tie the knot with abort
' quit quitword !

\ the real boot word
: boot  ( never returns ) space
    term g fg  ." this is " 
    term g hi fg  ." goforth"
    term g fg  ." . enjoy." cr space
    ." ram used: " here . ." of 65536 words."
    quit ;
' boot boot-word !


\ save the whole dictionary as a bootable image
here dump-core
bye
